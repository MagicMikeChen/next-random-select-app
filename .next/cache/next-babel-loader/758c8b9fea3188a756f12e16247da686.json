{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo } from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { CHANGE_COUNT_DOWN_STATE, SET_RESULT_NAME, RESET_ALL_STATUS } from \"./actions/action\";\nvar store;\nvar nameList = [{\n  nameId: 1,\n  name: \"美國瑜\"\n}, {\n  nameId: 2,\n  name: \"泰國瑜\"\n}, {\n  nameId: 3,\n  name: \"蔡台語\"\n}, {\n  nameId: 4,\n  name: \"蔡日文\"\n}, {\n  nameId: 5,\n  name: \"李白\"\n}, {\n  nameId: 6,\n  name: \"李黑\"\n}, {\n  nameId: 7,\n  name: \"蘇東坡\"\n}, {\n  nameId: 8,\n  name: \"蘇西坡\"\n}, {\n  nameId: 9,\n  name: \"蘇北坡\"\n}];\nvar initialState = {\n  isCountDown: false,\n  resultName: \"\",\n  nameList: nameList\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RESET_ALL_STATUS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isCountDown: false,\n        resultName: \"\"\n      });\n\n    case SET_RESULT_NAME:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        resultName: action.payload.resultName\n      });\n\n    case CHANGE_COUNT_DOWN_STATE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isCountDown: !state.isCountDown\n      });\n\n    default:\n      return state;\n  }\n};\n\nfunction initStore() {\n  var preloadedState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  return createStore(reducer, preloadedState, composeWithDevTools(applyMiddleware()));\n}\n\nexport var initializeStore = function initializeStore(preloadedState) {\n  var _store2;\n\n  var _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (false) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeStore(initialState);\n  }, [initialState]);\n  return store;\n}\n\n_s(useStore, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["/Users/mikechen-mbp/Desktop/react_project/with-redux/store.js"],"names":["useMemo","createStore","applyMiddleware","composeWithDevTools","CHANGE_COUNT_DOWN_STATE","SET_RESULT_NAME","RESET_ALL_STATUS","store","nameList","nameId","name","initialState","isCountDown","resultName","reducer","state","action","type","payload","initStore","preloadedState","initializeStore","_store","getState","undefined","useStore"],"mappings":"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","sourcesContent":["import { useMemo } from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport {\n  CHANGE_COUNT_DOWN_STATE,\n  SET_RESULT_NAME,\n  RESET_ALL_STATUS,\n} from \"./actions/action\";\n\nlet store;\n\nconst nameList = [\n  { nameId: 1, name: \"美國瑜\" },\n  { nameId: 2, name: \"泰國瑜\" },\n  { nameId: 3, name: \"蔡台語\" },\n  { nameId: 4, name: \"蔡日文\" },\n  { nameId: 5, name: \"李白\" },\n  { nameId: 6, name: \"李黑\" },\n  { nameId: 7, name: \"蘇東坡\" },\n  { nameId: 8, name: \"蘇西坡\" },\n  { nameId: 9, name: \"蘇北坡\" },\n];\n\nconst initialState = {\n  isCountDown: false,\n  resultName: \"\",\n  nameList: nameList,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case RESET_ALL_STATUS:\n      return {\n        ...state,\n        isCountDown: false,\n        resultName: \"\",\n      };\n    case SET_RESULT_NAME:\n      return {\n        ...state,\n        resultName: action.payload.resultName,\n      };\n    case CHANGE_COUNT_DOWN_STATE:\n      return {\n        ...state,\n        isCountDown: !state.isCountDown,\n      };\n\n    default:\n      return state;\n  }\n};\n\nfunction initStore(preloadedState = initialState) {\n  return createStore(\n    reducer,\n    preloadedState,\n    composeWithDevTools(applyMiddleware())\n  );\n}\n\nexport const initializeStore = (preloadedState) => {\n  let _store = store ?? initStore(preloadedState);\n\n  // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n  if (preloadedState && store) {\n    _store = initStore({\n      ...store.getState(),\n      ...preloadedState,\n    });\n    // Reset the current store\n    store = undefined;\n  }\n\n  // For SSG and SSR always create a new store\n  if (typeof window === \"undefined\") return _store;\n  // Create the store once in the client\n  if (!store) store = _store;\n\n  return _store;\n};\n\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}