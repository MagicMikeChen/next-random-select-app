{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo } from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { CHANGE_COUNT_DOWN_STATE } from \"./actions/action\";\nvar store;\nvar initialState = {\n  lastUpdate: 0,\n  light: false,\n  count: 0,\n  isCountDown: false\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CHANGE_COUNT_DOWN_STATE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isCountDown: !state.isCountDown\n      });\n\n    case \"TICK\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lastUpdate: action.lastUpdate,\n        light: !!action.light\n      });\n\n    case \"INCREMENT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count + 1\n      });\n\n    case \"DECREMENT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count - 1\n      });\n\n    case \"RESET\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: initialState.count\n      });\n\n    default:\n      return state;\n  }\n};\n\nfunction initStore() {\n  var preloadedState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  return createStore(reducer, preloadedState, composeWithDevTools(applyMiddleware()));\n}\n\nexport var initializeStore = function initializeStore(preloadedState) {\n  var _store2;\n\n  var _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (false) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeStore(initialState);\n  }, [initialState]);\n  return store;\n}\n\n_s(useStore, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["/Users/mikechen-mbp/Desktop/react_project/with-redux/store.js"],"names":["useMemo","createStore","applyMiddleware","composeWithDevTools","CHANGE_COUNT_DOWN_STATE","store","initialState","lastUpdate","light","count","isCountDown","reducer","state","action","type","initStore","preloadedState","initializeStore","_store","getState","undefined","useStore"],"mappings":";;;;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AAEA,IAAIC,KAAJ;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,CADO;AAEnBC,EAAAA,KAAK,EAAE,KAFY;AAGnBC,EAAAA,KAAK,EAAE,CAHY;AAInBC,EAAAA,WAAW,EAAE;AAJM,CAArB;;AAOA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,uBAAL;AACE,6CACKQ,KADL;AAEEF,QAAAA,WAAW,EAAE,CAACE,KAAK,CAACF;AAFtB;;AAIF,SAAK,MAAL;AACE,6CACKE,KADL;AAEEL,QAAAA,UAAU,EAAEM,MAAM,CAACN,UAFrB;AAGEC,QAAAA,KAAK,EAAE,CAAC,CAACK,MAAM,CAACL;AAHlB;;AAKF,SAAK,WAAL;AACE,6CACKI,KADL;AAEEH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,GAAc;AAFvB;;AAIF,SAAK,WAAL;AACE,6CACKG,KADL;AAEEH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,GAAc;AAFvB;;AAIF,SAAK,OAAL;AACE,6CACKG,KADL;AAEEH,QAAAA,KAAK,EAAEH,YAAY,CAACG;AAFtB;;AAIF;AACE,aAAOG,KAAP;AA5BJ;AA8BD,CA/BD;;AAiCA,SAASG,SAAT,GAAkD;AAAA,MAA/BC,cAA+B,uEAAdV,YAAc;AAChD,SAAOL,WAAW,CAChBU,OADgB,EAEhBK,cAFgB,EAGhBb,mBAAmB,CAACD,eAAe,EAAhB,CAHH,CAAlB;AAKD;;AAED,OAAO,IAAMe,eAAe,GAAG,SAAlBA,eAAkB,CAACD,cAAD,EAAoB;AAAA;;AACjD,MAAIE,MAAM,cAAGb,KAAH,6CAAYU,SAAS,CAACC,cAAD,CAA/B,CADiD,CAGjD;AACA;;;AACA,MAAIA,cAAc,IAAIX,KAAtB,EAA6B;AAC3Ba,IAAAA,MAAM,GAAGH,SAAS,iCACbV,KAAK,CAACc,QAAN,EADa,GAEbH,cAFa,EAAlB,CAD2B,CAK3B;;AACAX,IAAAA,KAAK,GAAGe,SAAR;AACD,GAZgD,CAcjD;;;AACA,aAAmC,OAAOF,MAAP,CAfc,CAgBjD;;AACA,MAAI,CAACb,KAAL,EAAYA,KAAK,GAAGa,MAAR;AAEZ,SAAOA,MAAP;AACD,CApBM;AAsBP,OAAO,SAASG,QAAT,CAAkBf,YAAlB,EAAgC;AAAA;;AACrC,MAAMD,KAAK,GAAGL,OAAO,CAAC;AAAA,WAAMiB,eAAe,CAACX,YAAD,CAArB;AAAA,GAAD,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOD,KAAP;AACD;;GAHegB,Q","sourcesContent":["import { useMemo } from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { CHANGE_COUNT_DOWN_STATE } from \"./actions/action\";\n\nlet store;\n\nconst initialState = {\n  lastUpdate: 0,\n  light: false,\n  count: 0,\n  isCountDown: false,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_COUNT_DOWN_STATE:\n      return {\n        ...state,\n        isCountDown: !state.isCountDown,\n      };\n    case \"TICK\":\n      return {\n        ...state,\n        lastUpdate: action.lastUpdate,\n        light: !!action.light,\n      };\n    case \"INCREMENT\":\n      return {\n        ...state,\n        count: state.count + 1,\n      };\n    case \"DECREMENT\":\n      return {\n        ...state,\n        count: state.count - 1,\n      };\n    case \"RESET\":\n      return {\n        ...state,\n        count: initialState.count,\n      };\n    default:\n      return state;\n  }\n};\n\nfunction initStore(preloadedState = initialState) {\n  return createStore(\n    reducer,\n    preloadedState,\n    composeWithDevTools(applyMiddleware())\n  );\n}\n\nexport const initializeStore = (preloadedState) => {\n  let _store = store ?? initStore(preloadedState);\n\n  // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n  if (preloadedState && store) {\n    _store = initStore({\n      ...store.getState(),\n      ...preloadedState,\n    });\n    // Reset the current store\n    store = undefined;\n  }\n\n  // For SSG and SSR always create a new store\n  if (typeof window === \"undefined\") return _store;\n  // Create the store once in the client\n  if (!store) store = _store;\n\n  return _store;\n};\n\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}